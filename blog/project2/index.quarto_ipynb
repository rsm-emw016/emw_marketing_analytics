{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Poisson Regression Examples\"\n",
        "author: \"Emma Wu\"\n",
        "date: today\n",
        "callout-appearance: minimal # this hides the blue \"i\" icon on .callout-notes\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "## Blueprinty Case Study\n",
        "\n",
        "### Introduction\n",
        "\n",
        "Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. Unfortunately, such data is not available. \n",
        "\n",
        "However, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty's software. The marketing team would like to use this data to make the claim that firms using Blueprinty's software are more successful in getting their patent applications approved.\n",
        "\n",
        "\n",
        "### Data\n"
      ],
      "id": "b1cf701c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "#| output: false\n",
        "import pandas as pd\n",
        "df = pd.read_csv('blueprinty.csv')\n",
        "df.head()"
      ],
      "id": "3a131c88",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "df = pd.read_csv('blueprinty.csv')\n",
        "means = df.groupby(\"iscustomer\")[\"patents\"].mean().reset_index()\n",
        "means.columns = [\"Customer Status\", \"Mean Patents\"]\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "\n",
        "sns.histplot(data=df, x=\"patents\", hue=\"iscustomer\", bins=30,\n",
        "             element=\"step\", stat=\"density\", common_norm=False,\n",
        "             palette={0: \"skyblue\", 1: \"orange\"}, legend=True)\n",
        "\n",
        "plt.title(\"Histogram of Patents by Customer Status\")\n",
        "plt.xlabel(\"Number of Patents\")\n",
        "plt.ylabel(\"Density\")\n",
        "plt.legend(title=\"Customer Status\", labels=[\"Non-Customer\", \"Customer\"])\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "67432b4e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Customer Status | Mean Patents |\n",
        "|------------------|--------------|\n",
        "| Non-Customer             | 3.473013     |\n",
        "| Customer              | 4.133056     |\n",
        "\n",
        "From the chart and table, we can see that Blueprinty customers tend to have more patents than non-customers. On average, customers have 4.13 patents, while non-customers have 3.47. The histogram shows that customers are more likely to appear in the higher end of the distribution.\n",
        "\n",
        "However, it’s important to remember that customers are not randomly selected. That means we cannot say for sure that being a customer causes someone to have more patents. It’s possible that customers are already different before joining—perhaps they are more experienced, innovative, or come from regions or industries with higher patent activity.\n"
      ],
      "id": "92aae2a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "df = pd.read_csv(\"blueprinty.csv\") \n",
        "\n",
        "mean_age = df.groupby(\"iscustomer\")[\"age\"].mean().reset_index()\n",
        "mean_age.columns = [\"Customer Status\", \"Mean Age\"]\n",
        "\n",
        "region_counts = pd.crosstab(df[\"region\"], df[\"iscustomer\"])\n",
        "region_counts.columns = [\"Non-Customer\", \"Customer\"]\n",
        "region_props = region_counts.div(region_counts.sum(axis=0), axis=1).round(3) \n",
        "\n",
        "plt.figure(figsize=(10, 4))\n",
        "sns.histplot(data=df, x=\"age\", hue=\"iscustomer\", bins=20, palette=[\"orange\", \"skyblue\"], element=\"step\")\n",
        "plt.title(\"Age Distribution by Customer Status\")\n",
        "plt.xlabel(\"Age\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.legend(title=\"Customer Status\", labels=[\"Non-Customer\", \"Customer\"])\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "44f3ac36",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Customer Status | Mean Age |\n",
        "|------------------|-----------|\n",
        "| Non-Customer (0) | 26.10     |\n",
        "| Customer (1)     | 26.90     |\n",
        "\n",
        "Customers tend to be slightly older than non-customers. The age distribution plot shows that customers are more concentrated in the 20–35 age range, while non-customers are more evenly spread out. Although the difference is modest, it suggests that age may play a role in who becomes a customer, and should be considered when comparing outcomes like patent ownership.\n"
      ],
      "id": "1a5cedff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "df = pd.read_csv(\"blueprinty.csv\") \n",
        "\n",
        "region_counts = pd.crosstab(df[\"region\"], df[\"iscustomer\"])\n",
        "region_counts.columns = [\"Non-Customer\", \"Customer\"]\n",
        "region_props = region_counts.div(region_counts.sum(axis=0), axis=1).round(3) \n",
        "\n",
        "region_props.plot(kind=\"bar\", figsize=(10, 5), color=[\"#fdbf6f\", \"#a6cee3\"])  \n",
        "plt.title(\"Region Distribution by Customer Status\")\n",
        "plt.xlabel(\"Region\")\n",
        "plt.ylabel(\"Proportion within Group\")\n",
        "plt.legend(title=\"Customer Status\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()"
      ],
      "id": "509ba71b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Region     | Non-Customer | Customer |\n",
        "|------------|---------------|----------|\n",
        "| Midwest    | 0.184         | 0.077    |\n",
        "| Northeast  | 0.268         | 0.682    |\n",
        "| Northwest  | 0.155         | 0.060    |\n",
        "| South      | 0.153         | 0.073    |\n",
        "| Southwest  | 0.240         | 0.108    |\n",
        "\n",
        "There are also notable differences in regional distribution. Customers are overwhelmingly concentrated in the Northeast (68%), whereas non-customers are more evenly distributed across regions, especially in the Midwest and Southwest. This uneven geographic pattern indicates that customer status is not random and may be influenced by location-based factors. As with age, region should be taken into account when analyzing differences between customers and non-customers.\n",
        "\n",
        "\n",
        "### Estimation of Simple Poisson Model\n",
        "\n",
        "Since our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.\n",
        "\n",
        "Suppose we observe independent draws $Y_1, Y_2, \\dots, Y_n \\sim \\text{Poisson}(\\lambda)$,  \n",
        "where the probability mass function of the Poisson distribution is:\n",
        "\n",
        "$f(Y_i \\mid \\lambda) = \\dfrac{e^{-\\lambda} \\lambda^{Y_i}}{Y_i!}$\n",
        "\n",
        "Then, the likelihood function for the full sample is:\n",
        "\n",
        "$\\mathcal{L}(\\lambda) = \\prod_{i=1}^{n} f(Y_i \\mid \\lambda)\n",
        "= \\prod_{i=1}^{n} \\dfrac{e^{-\\lambda} \\lambda^{Y_i}}{Y_i!}\n",
        "= e^{-n\\lambda} \\lambda^{\\sum_{i=1}^{n} Y_i} \\prod_{i=1}^{n} \\dfrac{1}{Y_i!}$\n",
        "\n",
        "Since it's easier to work with, we usually take the logarithm of the likelihood function.  \n",
        "This gives us the log-likelihood:\n",
        "\n",
        "$\\log \\mathcal{L}(\\lambda) = \\sum_{i=1}^{n} \\left( -\\lambda + Y_i \\log \\lambda - \\log(Y_i!) \\right)\n",
        "= -n\\lambda + \\left( \\sum_{i=1}^{n} Y_i \\right) \\log \\lambda - \\sum_{i=1}^{n} \\log(Y_i!)$\n",
        "\n",
        "---\n",
        "\n",
        "To better understand the relationship between λ (lambda) and the observed data, we now walk through a full maximum likelihood estimation process for the Poisson model.\n"
      ],
      "id": "a2fbedd8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.optimize import minimize_scalar\n",
        "from scipy.special import gammaln\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"blueprinty.csv\")\n",
        "Y = df[\"patents\"].values  \n",
        "\n",
        "# ---- Step 1: Define log-likelihood function ----\n",
        "def poisson_loglikelihood(lam, Y):\n",
        "    if lam <= 0:\n",
        "        return -np.inf\n",
        "    return np.sum(Y * np.log(lam) - lam - gammaln(Y + 1))\n",
        "\n",
        "# ---- Step 2: Plot lambda vs log-likelihood ----\n",
        "lambdas = np.linspace(0.1, 10, 200)\n",
        "loglik_values = [poisson_loglikelihood(lam, Y) for lam in lambdas]\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(lambdas, loglik_values, label=\"Log-Likelihood\")\n",
        "plt.axvline(x=np.mean(Y), color='red', linestyle='--', label='MLE (mean of Y)')\n",
        "plt.title(\"Poisson Log-Likelihood vs Lambda\")\n",
        "plt.xlabel(\"Lambda\")\n",
        "plt.ylabel(\"Log-Likelihood\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# ---- Step 3: Analytical MLE solution ----\n",
        "lambda_mle_analytical = np.mean(Y)\n",
        "\n",
        "# ---- Step 4: Numerical MLE using optimization ----\n",
        "neg_loglik = lambda lam: -poisson_loglikelihood(lam, Y)\n",
        "opt_result = minimize_scalar(neg_loglik, bounds=(0.01, 20), method='bounded')\n",
        "\n",
        "lambda_mle_numerical = opt_result.x\n",
        "\n",
        "# Collect results\n",
        "results = {\n",
        "    \"Analytical MLE (mean of Y)\": round(lambda_mle_analytical, 4),\n",
        "    \"Numerical MLE (optimize)\": round(lambda_mle_numerical, 4)\n",
        "}"
      ],
      "id": "00525d5c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The plot above shows how the Poisson log-likelihood changes as we vary $\\lambda$, the expected number of patents per firm. The curve reaches its peak at $\\lambda = 3.6847$, which is the value that makes the observed data most likely — this is our Maximum Likelihood Estimate (MLE).\n",
        "\n",
        "The table below confirms that both the analytical solution (sample mean) and the numerical optimization produce exactly the same MLE value. This gives us confidence that our model is correctly specified and our estimation is reliable.\n",
        "\n",
        "\n",
        "| Method                         | MLE Value |\n",
        "|--------------------------------|-----------|\n",
        "| Analytical MLE (mean of Y)     | 3.6847    |\n",
        "| Numerical MLE (optimize)       | 3.6847    |\n",
        "\n",
        "\n",
        "\n",
        "### Estimation of Poisson Regression Model\n",
        "\n",
        "Next, we extend our simple Poisson model to a Poisson Regression Model such that $Y_i = \\text{Poisson}(\\lambda_i)$ where $\\lambda_i = \\exp(X_i'\\beta)$. The interpretation is that the success rate of patent awards is not constant across all firms ($\\lambda$) but rather is a function of firm characteristics $X_i$. Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.\n"
      ],
      "id": "7fdc831f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "#| output: false\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.optimize import minimize\n",
        "from scipy.special import gammaln\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# ---- Step 0: Load and prepare the data ----\n",
        "df = pd.read_csv(\"blueprinty.csv\")\n",
        "df[\"age_sq\"] = df[\"age\"] ** 2\n",
        "region_dummies = pd.get_dummies(df[\"region\"], drop_first=True)\n",
        "\n",
        "# Construct the design matrix X\n",
        "X = pd.concat([\n",
        "    pd.Series(1, index=df.index, name=\"intercept\"),\n",
        "    df[[\"age\", \"age_sq\", \"iscustomer\"]],\n",
        "    region_dummies\n",
        "], axis=1)\n",
        "y = df[\"patents\"].values\n",
        "X_matrix = X.values\n",
        "\n",
        "# ---- Step 1: Define log-likelihood function with clipping to prevent overflow ----\n",
        "def poisson_loglikelihood(beta, Y, X):\n",
        "    beta = np.asarray(beta, dtype=np.float64)\n",
        "    X = np.asarray(X, dtype=np.float64)\n",
        "    xb = np.dot(X, beta)\n",
        "    xb = np.clip(xb, -50, 50)  # prevent overflow in exp\n",
        "    lam = np.exp(xb)\n",
        "    return np.sum(Y * xb - lam - gammaln(Y + 1))\n",
        "\n",
        "# ---- Step 2: Define negative log-likelihood for minimization ----\n",
        "def neg_loglikelihood(beta, Y, X):\n",
        "    return -poisson_loglikelihood(beta, Y, X)\n",
        "\n",
        "# ---- Step 3: Numerical optimization to find MLE ----\n",
        "beta_init = np.zeros(X.shape[1])\n",
        "result = minimize(neg_loglikelihood, beta_init, args=(y, X_matrix), method=\"BFGS\")\n",
        "beta_hat = result.x\n",
        "hessian_inv = result.hess_inv\n",
        "se_hat = np.sqrt(np.diag(hessian_inv))\n",
        "\n",
        "# ---- Step 4: Present coefficient table ----\n",
        "results_table = pd.DataFrame({\n",
        "    \"Coefficient\": beta_hat.round(4),\n",
        "    \"Std. Error\": se_hat.round(4)\n",
        "}, index=X.columns)\n",
        "\n",
        "results_table"
      ],
      "id": "60951ebc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "metadata": {},
      "source": [
        "| Variable    | Coefficient | Std. Error |\n",
        "|-------------|-------------|------------|\n",
        "| intercept   | -0.5100     | 0.0591     |\n",
        "| age         |  0.1487     | 0.0080     |\n",
        "| age_sq      | -0.0030     | 0.0002     |\n",
        "| iscustomer  |  0.2076     | 0.0289     |\n",
        "| Northeast   |  0.0292     | 0.0540     |\n",
        "| Northwest   | -0.0176     | 0.0668     |\n",
        "| South       |  0.0566     | 0.0660     |\n",
        "| Southwest   |  0.0506     | 0.0597     |\n",
        "\n",
        "\n",
        "#### Interpreting the Poisson Regression Results\n",
        "\n",
        "From our estimated Poisson regression model:\n",
        "\n",
        "- The coefficient on `age` is **0.1487**, indicating that older firms tend to receive more patents.\n",
        "- The negative coefficient on `age_sq` (**−0.0030**) suggests diminishing returns to age — patenting increases with age but at a decreasing rate.\n",
        "- The coefficient on `iscustomer` is **0.2076**, meaning that being a Blueprinty customer increases the log of expected patent counts by this amount.\n",
        "\n",
        "To make this more interpretable, we exponentiate the `iscustomer` coefficient:\n",
        "\n",
        "\\\n",
        "$\\exp(0.2076) \\approx 1.23$\n",
        "\\\n",
        "\n",
        "This implies that being a customer is associated with approximately a **23% increase in expected patent output**, holding other variables constant.\n",
        "\n",
        "\n",
        "---"
      ],
      "id": "d398c17c"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Interpreting the Effect of Blueprinty: Counterfactual Simulation\n",
        "\n",
        "Because the coefficients are on a log scale, we simulate two counterfactual scenarios:\n",
        "\n",
        "- **$X_0$**: All firms are treated as non-customers (`iscustomer = 0`)\n",
        "- **$X_1$**: All firms are treated as Blueprinty customers (`iscustomer = 1`)\n",
        "\n",
        "We use our fitted model to compute:\n",
        "\n",
        "- $\\hat{y}_0$ = predicted patents for $X_0$\n",
        "- $\\hat{y}_1$ = predicted patents for $X_1$\n",
        "- Average difference = $\\hat{y}_1 - \\hat{y}_0$\n",
        "\n",
        "\\\n",
        "$\\text{Average difference} = 0.79$\n",
        "\\\n",
        "\n",
        "This means Blueprinty customers are predicted to earn **0.79 more patents**, on average, than they would have if they weren’t customers.\n",
        "\n",
        "---\n",
        "\n",
        "#### Conclusion\n",
        "\n",
        "Our analysis suggests that Blueprinty's software has a **positive and meaningful effect** on patent success. While the impact of being a customer translates to fewer than one additional patent over five years, this is a substantial gain in innovation output, especially when aggregated across a large number of firms. These results highlight Blueprinty's potential to support R&D productivity.\n",
        "\n",
        "\n",
        "## AirBnB Case Study\n",
        "\n",
        "### Introduction\n",
        "\n",
        "AirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City.  The data include the following variables:\n",
        "\n",
        ":::: {.callout-note collapse=\"true\"}\n",
        "### Variable Definitions\n",
        "\n",
        "    - `id` = unique ID number for each unit\n",
        "    - `last_scraped` = date when information scraped\n",
        "    - `host_since` = date when host first listed the unit on Airbnb\n",
        "    - `days` = `last_scraped` - `host_since` = number of days the unit has been listed\n",
        "    - `room_type` = Entire home/apt., Private room, or Shared room\n",
        "    - `bathrooms` = number of bathrooms\n",
        "    - `bedrooms` = number of bedrooms\n",
        "    - `price` = price per night (dollars)\n",
        "    - `number_of_reviews` = number of reviews for the unit on Airbnb\n",
        "    - `review_scores_cleanliness` = a cleanliness score from reviews (1-10)\n",
        "    - `review_scores_location` = a \"quality of location\" score from reviews (1-10)\n",
        "    - `review_scores_value` = a \"quality of value\" score from reviews (1-10)\n",
        "    - `instant_bookable` = \"t\" if instantly bookable, \"f\" if not\n",
        "\n",
        "::::\n"
      ],
      "id": "4fbf6dbb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "#| output: false\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "df.head()"
      ],
      "id": "697b9c9c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Data Exploration and Cleaning \n",
        "Before modeling, we explore and clean the dataset to ensure that it contains only relevant and usable observations. We also perform some basic exploratory data analysis (EDA) to better understand the distribution and relationships among key variables.\n",
        "\n",
        "Before we begin analysis or plotting, it's important to understand which variables have missing values and how significant the gaps are.\n"
      ],
      "id": "c38beffa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "\n",
        "missing_pct = df.isnull().mean().sort_values(ascending=False) * 100\n",
        "\n",
        "# Plot missingness\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "missing_pct[missing_pct > 0].plot(kind='barh', color='skyblue')\n",
        "plt.title(\"Missing Data by Column\")\n",
        "plt.xlabel(\"% missing\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "c4f3d702",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Approximately 25% of listings are missing values in at least one of the review score fields — including cleanliness, location, or value ratings. In contrast, the rest of the dataset — including key variables such as price, bathrooms, bedrooms, and room_type — is largely complete, with fewer than 1% missing values. This gives us confidence that we can move forward with a clean dataset by removing only rows with missing review scores, while preserving most of the original sample.\n",
        "\n",
        "To understand the distribution of listing types, we first look at how many units fall into each room category.\n"
      ],
      "id": "619628af"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "#| output: false\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "\n",
        "columns_to_keep = [\n",
        "    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\",\n",
        "    \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\",\n",
        "    \"instant_bookable\"\n",
        "]\n",
        "df_clean = df.dropna(subset=columns_to_keep)\n",
        "df_clean[\"room_type\"].value_counts()"
      ],
      "id": "0f3d2be3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Room Type         | Count |\n",
        "|-------------------|-------|\n",
        "| Entire home/apt   | 15,543 |\n",
        "| Private room      | 13,773 |\n",
        "| Shared room       | 844    |\n",
        "\n",
        "We see that most listings are either entire homes or private rooms. Shared rooms are relatively rare in the dataset, making up less than 3% of listings.\n"
      ],
      "id": "94da741a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "#| output: false\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "df.isnull().sum()\n",
        "\n",
        "columns_to_keep = [\n",
        "    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\",\n",
        "    \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\",\n",
        "    \"instant_bookable\"\n",
        "]\n",
        "\n",
        "df_clean = df.dropna(subset=columns_to_keep)\n",
        "df_clean.shape\n",
        "\n",
        "df_clean[\"price\"] = df_clean[\"price\"].replace(\"[\\$,]\", \"\", regex=True).astype(float)\n",
        "df_clean[\"instant_bookable\"] = df_clean[\"instant_bookable\"].map({\"t\": 1, \"f\": 0})\n",
        "room_dummies = pd.get_dummies(df_clean[\"room_type\"], drop_first=True)\n",
        "df_clean = pd.concat([df_clean, room_dummies], axis=1)\n",
        "room_dummies = pd.get_dummies(df_clean[\"room_type\"], drop_first=True)\n",
        "df_clean = pd.concat([df_clean, room_dummies], axis=1)\n",
        "df_clean[[\"price\", \"bathrooms\", \"bedrooms\", \"number_of_reviews\"]].describe()"
      ],
      "id": "9920d848",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Next, we explore the core numeric variables such as price, bedrooms, and number of reviews. This gives us a sense of the data’s central tendency, spread, and potential outliers.\n",
        "\n",
        "| Statistic | `price` | `bathrooms` | `bedrooms` | `number_of_reviews` |\n",
        "|-----------|---------|-------------|------------|----------------------|\n",
        "| Count     | 30160   | 30160       | 30160      | 30160                |\n",
        "| Mean      | 140.21  | 1.12        | 1.15       | 21.17                |\n",
        "| Std. Dev. | 188.39  | 0.38        | 0.70       | 32.01                |\n",
        "| Min       | 10.00   | 0.00        | 0.00       | 1.00                 |\n",
        "| 25%       | 70.00   | 1.00        | 1.00       | 3.00                 |\n",
        "| 50%       | 103.00  | 1.00        | 1.00       | 8.00                 |\n",
        "| 75%       | 169.00  | 1.00        | 1.00       | 26.00                |\n",
        "| Max       | 10000.00| 6.00        | 10.00      | 421.00         \n",
        "\n",
        "The average nightly price for a listing is $140, but prices vary widely, with some as low as $10 and a few as high as $10,000 — indicating potential outliers. Most listings have just one bathroom and bedroom. The average number of reviews is 21.17, but the maximum reaches 421, which suggests a strong right-skew in review counts. This supports the idea that some listings are booked (and reviewed) far more frequently than others.\n",
        "\n",
        "---\n",
        "\n",
        "We begin by exploring the overall distribution of review counts across listings. Since `number_of_reviews` is our proxy for bookings, it's important to understand how this outcome behaves.\n",
        "\n",
        "The histogram below shows a highly right-skewed distribution. Most listings receive fewer than 30 reviews, with a large number of listings receiving fewer than 10. A small number of listings stand out with over 200 reviews — these will have a large influence on our model.\n",
        "\n",
        "::: {.callout-note title=\"Why This Matters\"}\n",
        "The skewed distribution confirms that a Poisson model — which is well-suited for modeling count data — is appropriate for this task.\n",
        ":::\n",
        "\n",
        "We visualize the overall distribution of review counts to further confirm its skewness. This outcome variable will serve as our target in the Poisson regression.\n"
      ],
      "id": "b4c8fc8b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "\n",
        "columns_to_keep = [\n",
        "    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\",\n",
        "    \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\",\n",
        "    \"instant_bookable\"\n",
        "]\n",
        "df_clean = df.dropna(subset=columns_to_keep)\n",
        "sns.histplot(df_clean[\"number_of_reviews\"], bins=50)\n",
        "plt.title(\"Distribution of Number of Reviews\")\n",
        "plt.xlabel(\"Number of Reviews\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.show()"
      ],
      "id": "4b0119c3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We now compare review activity across different room types to see if guests prefer specific listing categories. The boxplot shows how the number of reviews differs by room type. Private rooms and entire homes/apartments tend to have a wider spread of review counts, with many listings receiving over 100 reviews. Shared rooms receive fewer reviews on average. This suggests that travelers may prefer private or full-space options, and that those listings are likely booked more often.\n"
      ],
      "id": "feb2f5ff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "\n",
        "columns_to_keep = [\n",
        "    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\",\n",
        "    \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\",\n",
        "    \"instant_bookable\"\n",
        "]\n",
        "\n",
        "df_clean = df.dropna(subset=columns_to_keep)\n",
        "sns.boxplot(x=\"room_type\", y=\"number_of_reviews\", data=df_clean)\n",
        "plt.title(\"Number of Reviews by Room Type\")\n",
        "plt.show()"
      ],
      "id": "99ce38f1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "To explore whether price affects popularity, we examine the relationship between listing price and number of reviews. The scatterplot shows a weak inverse relationship between listing price and number of reviews. Overall, we see that lower-priced listings tend to have more reviews, while higher-priced listings receive fewer. This inverse relationship is intuitive — cheaper listings are more accessible to a wider range of guests, potentially leading to higher booking and review rates. However, there is still significant variability, especially among listings priced under $200.\n"
      ],
      "id": "061b0c48"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "\n",
        "columns_to_keep = [\n",
        "    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\",\n",
        "    \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\",\n",
        "    \"instant_bookable\"\n",
        "]\n",
        "df_clean = df.dropna(subset=columns_to_keep)\n",
        "\n",
        "sns.scatterplot(x=\"price\", y=\"number_of_reviews\", data=df_clean)\n",
        "plt.xlim(0, 500)  # Remove extreme outliers\n",
        "plt.title(\"Price vs Number of Reviews\")\n",
        "plt.show()"
      ],
      "id": "87b700da",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Finally, we look at how numeric variables relate to one another. This helps identify strong pairwise relationships and avoid multicollinearity in modeling.\n",
        "\n",
        "Key observations:\n",
        "\n",
        "- `review_scores_cleanliness` and `review_scores_value` have a relatively strong positive correlation (~0.62).\n",
        "- `price` and `number_of_reviews` are almost uncorrelated (~−0.002), which supports what we observed visually.\n",
        "- Cleanliness and location scores tend to correlate moderately with other review-based features.\n"
      ],
      "id": "a636292e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "df = pd.read_csv('airbnb.csv')\n",
        "\n",
        "columns_to_keep = [\n",
        "    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\",\n",
        "    \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\",\n",
        "    \"instant_bookable\"\n",
        "]\n",
        "df_clean = df.dropna(subset=columns_to_keep)\n",
        "sns.heatmap(df_clean[[\n",
        "    \"price\", \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\"\n",
        "]].corr(), annot=True, cmap=\"coolwarm\")\n",
        "plt.title(\"Correlation Heatmap\")\n",
        "plt.show()"
      ],
      "id": "5c60042f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "From these exploratory insights, we observe several patterns worth testing formally. In the next section, we fit a Poisson regression model to quantify which features are most associated with review count.\n",
        "\n",
        "### Modeling: Poisson Regression\n",
        "We now build a Poisson regression model to understand what factors are associated with higher booking activity on Airbnb, using `number_of_reviews` as a proxy for the number of bookings.\n"
      ],
      "id": "d6ac70ec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| code-summary: \"Code\"\n",
        "#| output: false\n",
        "import statsmodels.api as sm\n",
        "import pandas as pd\n",
        "\n",
        "# Load and clean dataset\n",
        "df = pd.read_csv(\"airbnb.csv\")\n",
        "columns_to_keep = [\n",
        "    \"room_type\", \"bathrooms\", \"bedrooms\", \"price\",\n",
        "    \"number_of_reviews\", \"review_scores_cleanliness\",\n",
        "    \"review_scores_location\", \"review_scores_value\",\n",
        "    \"instant_bookable\"\n",
        "]\n",
        "df_clean = df.dropna(subset=columns_to_keep)\n",
        "df_clean[\"price\"] = df_clean[\"price\"].replace(\"[\\$,]\", \"\", regex=True).astype(float)\n",
        "df_clean[\"instant_bookable\"] = df_clean[\"instant_bookable\"].map({\"t\": 1, \"f\": 0})\n",
        "room_dummies = pd.get_dummies(df_clean[\"room_type\"], drop_first=True)\n",
        "df_clean = pd.concat([df_clean, room_dummies], axis=1)\n",
        "\n",
        "# Define X and y\n",
        "X_model = df_clean[[\n",
        "    \"price\", \"review_scores_cleanliness\", \"review_scores_location\",\n",
        "    \"review_scores_value\", \"instant_bookable\", \"Private room\", \"Shared room\"\n",
        "]]\n",
        "X_model = sm.add_constant(X_model).astype(float)\n",
        "y_model = df_clean[\"number_of_reviews\"]\n",
        "\n",
        "# Fit Poisson regression\n",
        "poisson_model = sm.GLM(y_model, X_model, family=sm.families.Poisson()).fit()\n",
        "poisson_model.summary()"
      ],
      "id": "bd3c1fb0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The table below summarizes the estimated coefficients and their interpretation. Coefficients are in log scale, so we exponentiate them to interpret as % change in expected review count.\n",
        "\n",
        "| Variable                | Coefficient | Std. Error | p-value | Interpretation                                 |\n",
        "|-------------------------|-------------|-------------|---------|------------------------------------------------|\n",
        "| Intercept               | 3.5554      | 0.015       | 0.000   | Baseline log review count                     |\n",
        "| Price                  | −0.0000022  | 0.0000075   | 0.769   | No significant effect                         |\n",
        "| Cleanliness Score       | 0.1135      | 0.001       | 0.000   | Higher cleanliness → more reviews             |\n",
        "| Location Score          | −0.0794     | 0.002       | 0.000   | Slightly lower reviews with higher location   |\n",
        "| Value Score             | −0.0921     | 0.002       | 0.000   | Slightly lower reviews with higher value      |\n",
        "| Instant Bookable        | 0.3331      | 0.003       | 0.000   | +40% more reviews if instantly bookable       |\n",
        "| Private Room            | −0.0319     | 0.003       | 0.000   | ~3% fewer reviews than Entire home/apt        |\n",
        "| Shared Room             | −0.2719     | 0.009       | 0.000   | ~24% fewer reviews than Entire home/apt       |\n",
        "\n",
        "\n",
        "- The `price` variable does not have a statistically significant effect on the number of reviews.\n",
        "- Review scores for cleanliness have a positive effect, while scores for location and value have slightly negative effects.\n",
        "- Listings that are instantly bookable tend to get around 40% more reviews, which suggests higher guest interest or ease of booking.\n",
        "- Compared to entire homes/apartments (the reference room type), private rooms and especially shared rooms tend to receive fewer reviews, suggesting guests may prefer more private accommodations.\n",
        "\n",
        "\n",
        "\n",
        "### Result and Conclusion \n",
        "\n",
        "After cleaning the dataset and conducting exploratory analysis, we used a Poisson regression model to identify which features are most associated with booking activity, as measured by the number of reviews. The model helps us understand how listing characteristics relate to the volume of guest interest and interaction.\n",
        "\n",
        "Based on the regression output, we observed several important insights:\n",
        "\n",
        "- Cleanliness score: Each one-point increase in cleanliness is associated with approximately 12% more reviews, highlighting the importance of guest perception of hygiene.\n",
        "- Instant bookability: Listings that are instantly bookable tend to receive around 40% more reviews — likely due to convenience and ease of booking.\n",
        "- Room type:\n",
        "  - Private rooms receive 3% fewer reviews than entire homes/apartments (the baseline).\n",
        "  - Shared rooms receive 24% fewer reviews, suggesting a clear guest preference for more privacy.\n",
        "- Price: Surprisingly, price does not have a statistically significant effect on review count in this dataset.\n",
        "- Location and value scores: Both showed statistically significant but slightly negative effects on reviews — possibly due to nonlinear relationships or correlation with other variables.\n",
        "\n",
        "\n",
        "These results suggest that Airbnb hosts aiming to increase booking activity should focus on the features that matter most to guests:\n",
        "\n",
        "- Enable **instant booking**,\n",
        "- Improve **cleanliness standards**\n",
        "- Offer **more private spaces**.\n",
        "\n",
        "Adjusting the listing price may be less effective on its own, especially if other core features do not meet guest expectations. These findings align with common user behavior — convenience, comfort, and perceived quality often drive engagement more than price alone.\n"
      ],
      "id": "11594ded"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/bibibingya/Downloads/emw_marketing_analytics/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}